# coding: utf-8

"""
    JuliaOS API

    API for JuliaOS backend server

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from _juliaos_client_api.models.strategy_blueprint import StrategyBlueprint
from _juliaos_client_api.models.tool_blueprint import ToolBlueprint
from _juliaos_client_api.models.trigger_config import TriggerConfig

class AgentBlueprint(BaseModel):
    """
    AgentBlueprint
    """
    tools: conlist(ToolBlueprint) = Field(default=..., description="List of tools the agent can use")
    strategy: StrategyBlueprint = Field(default=..., description="The strategy to guide the agent")
    trigger: TriggerConfig = Field(default=..., description="Configuration for event-based triggering of the agent")
    __properties = ["tools", "strategy", "trigger"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AgentBlueprint:
        """Create an instance of AgentBlueprint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item in self.tools:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tools'] = _items
        # override the default output from pydantic by calling `to_dict()` of strategy
        if self.strategy:
            _dict['strategy'] = self.strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trigger
        if self.trigger:
            _dict['trigger'] = self.trigger.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AgentBlueprint:
        """Create an instance of AgentBlueprint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AgentBlueprint.parse_obj(obj)

        _obj = AgentBlueprint.parse_obj({
            "tools": [ToolBlueprint.from_dict(_item) for _item in obj.get("tools")] if obj.get("tools") is not None else None,
            "strategy": StrategyBlueprint.from_dict(obj.get("strategy")) if obj.get("strategy") is not None else None,
            "trigger": TriggerConfig.from_dict(obj.get("trigger")) if obj.get("trigger") is not None else None
        })
        return _obj


