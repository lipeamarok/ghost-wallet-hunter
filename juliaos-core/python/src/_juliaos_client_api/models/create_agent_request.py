# coding: utf-8

"""
    JuliaOS API

    API for JuliaOS backend server

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from _juliaos_client_api.models.agent_blueprint import AgentBlueprint

class CreateAgentRequest(BaseModel):
    """
    CreateAgentRequest
    """
    id: StrictStr = Field(default=..., description="Unique identifier for the agent")
    name: StrictStr = Field(default=..., description="Human-readable name of the agent")
    description: StrictStr = Field(default=..., description="Short summary of what the agent does")
    blueprint: AgentBlueprint = Field(...)
    __properties = ["id", "name", "description", "blueprint"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateAgentRequest:
        """Create an instance of CreateAgentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of blueprint
        if self.blueprint:
            _dict['blueprint'] = self.blueprint.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateAgentRequest:
        """Create an instance of CreateAgentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateAgentRequest.parse_obj(obj)

        _obj = CreateAgentRequest.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "blueprint": AgentBlueprint.from_dict(obj.get("blueprint")) if obj.get("blueprint") is not None else None
        })
        return _obj


