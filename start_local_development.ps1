# üöÄ START LOCAL DEVELOPMENT - Ghost Wallet Hunter
# Script para iniciar todos os servi√ßos em desenvolvimento

Write-Host "üéØ GHOST WALLET HUNTER - DESENVOLVIMENTO LOCAL" -ForegroundColor Cyan
Write-Host "===============================================" -ForegroundColor Cyan

# üîç VERIFICAR SE O AMBIENTE FOI PREPARADO
Write-Host "`n1Ô∏è‚É£ VERIFICANDO AMBIENTE..." -ForegroundColor Yellow

if (!(Test-Path "backend\.venv")) {
    Write-Host "‚ùå Ambiente Python n√£o preparado! Execute: .\prepare_environment.ps1" -ForegroundColor Red
    exit 1
}

if (!(Test-Path "frontend\node_modules")) {
    Write-Host "‚ùå Depend√™ncias Node.js n√£o instaladas! Execute: .\prepare_environment.ps1" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Ambiente verificado!" -ForegroundColor Green

# üóÑÔ∏è VERIFICAR/INICIAR DATABASE
Write-Host "`n2Ô∏è‚É£ VERIFICANDO DATABASE..." -ForegroundColor Yellow

try {
    # Verificar se PostgreSQL est√° rodando (Docker ou local)
    $pgStatus = docker ps --filter "name=ghost-postgres" --format "{{.Status}}" 2>$null
    if ($pgStatus -match "Up") {
        Write-Host "‚úÖ PostgreSQL (Docker) j√° est√° rodando" -ForegroundColor Green
    }
    else {
        Write-Host "üê≥ Iniciando PostgreSQL via Docker..." -ForegroundColor Cyan
        docker start ghost-postgres 2>$null
        if ($LASTEXITCODE -ne 0) {
            # Container n√£o existe, criar novo
            docker run -d `
                --name ghost-postgres `
                -e POSTGRES_DB=juliaos `
                -e POSTGRES_USER=juliaos_user `
                -e POSTGRES_PASSWORD=julia_secret_123 `
                -p 5432:5432 `
                postgres:15
        }
        Start-Sleep 5
        Write-Host "‚úÖ PostgreSQL iniciado!" -ForegroundColor Green
    }
}
catch {
    Write-Host "‚ö†Ô∏è  Verificar PostgreSQL manualmente" -ForegroundColor Yellow
}

# üé¨ FUN√á√ÉO PARA INICIAR SERVI√áOS EM BACKGROUND
function Start-ServiceInBackground {
    param(
        [string]$Name,
        [string]$Command,
        [string]$WorkingDirectory = ".",
        [string]$Color = "White"
    )

    Write-Host "üöÄ Iniciando $Name..." -ForegroundColor $Color

    Start-Process powershell -ArgumentList "-NoExit", "-Command", "
        Write-Host 'üéØ $Name - $(Get-Date)' -ForegroundColor $Color;
        Set-Location '$WorkingDirectory';
        $Command
    " -WindowStyle Normal
}

# üíé INICIAR JULIAOS BACKEND
Write-Host "`n3Ô∏è‚É£ INICIANDO JULIAOS BACKEND..." -ForegroundColor Yellow

$juliaCommand = @"
Write-Host 'üì° Aguardando database...' -ForegroundColor Cyan;
Start-Sleep 3;
Write-Host 'üéØ Iniciando JuliaOS Server...' -ForegroundColor Cyan;
julia --project=. run_server.jl
"@

Start-ServiceInBackground -Name "JuliaOS Backend" -Command $juliaCommand -WorkingDirectory "juliaos-core\backend" -Color "Magenta"

# Aguardar JuliaOS iniciar
Write-Host "‚è≥ Aguardando JuliaOS Backend inicializar..." -ForegroundColor Cyan
Start-Sleep 10

# üêç INICIAR PYTHON BACKEND
Write-Host "`n4Ô∏è‚É£ INICIANDO PYTHON BACKEND..." -ForegroundColor Yellow

$pythonCommand = @"
Write-Host 'üîå Ativando virtual environment...' -ForegroundColor Green;
.\.venv\Scripts\Activate.ps1;
Write-Host 'üéØ Iniciando Python Backend...' -ForegroundColor Green;
python -m uvicorn main:app --reload --host 0.0.0.0 --port 8001
"@

Start-ServiceInBackground -Name "Python Backend" -Command $pythonCommand -WorkingDirectory "backend" -Color "Green"

# Aguardar Python Backend iniciar
Write-Host "‚è≥ Aguardando Python Backend inicializar..." -ForegroundColor Cyan
Start-Sleep 8

# üåê INICIAR FRONTEND
Write-Host "`n5Ô∏è‚É£ INICIANDO FRONTEND..." -ForegroundColor Yellow

$frontendCommand = @"
Write-Host 'üéØ Iniciando Frontend React...' -ForegroundColor Blue;
npm run dev
"@

Start-ServiceInBackground -Name "Frontend React" -Command $frontendCommand -WorkingDirectory "frontend" -Color "Blue"

# Aguardar Frontend iniciar
Write-Host "‚è≥ Aguardando Frontend inicializar..." -ForegroundColor Cyan
Start-Sleep 5

# üîç VERIFICAR SERVI√áOS
Write-Host "`n6Ô∏è‚É£ VERIFICANDO SERVI√áOS..." -ForegroundColor Yellow

$services = @(
    @{Name = "JuliaOS Backend"; Url = "http://localhost:8052/health"; Color = "Magenta" },
    @{Name = "Python Backend"; Url = "http://localhost:8001/health"; Color = "Green" },
    @{Name = "Frontend"; Url = "http://localhost:3000"; Color = "Blue" }
)

foreach ($service in $services) {
    try {
        Write-Host "üîç Testando $($service.Name)..." -ForegroundColor $service.Color
        $response = Invoke-WebRequest -Uri $service.Url -TimeoutSec 5 -UseBasicParsing
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ $($service.Name) - OK" -ForegroundColor Green
        }
        else {
            Write-Host "‚ö†Ô∏è  $($service.Name) - Status: $($response.StatusCode)" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "‚ùå $($service.Name) - N√£o respondendo" -ForegroundColor Red
    }
}

# üìã INFORMA√á√ïES DE ACESSO
Write-Host "`nüéØ INFORMA√á√ïES DE ACESSO" -ForegroundColor Cyan
Write-Host "========================" -ForegroundColor Cyan
Write-Host "üåê Frontend:        http://localhost:3000" -ForegroundColor Blue
Write-Host "üêç Python Backend:  http://localhost:8001" -ForegroundColor Green
Write-Host "üíé JuliaOS Backend: http://localhost:8052" -ForegroundColor Magenta
Write-Host "üóÑÔ∏è  PostgreSQL:     localhost:5432" -ForegroundColor Yellow

Write-Host "`nüìö ENDPOINTS √öTEIS:" -ForegroundColor White
Write-Host "‚Ä¢ http://localhost:8001/docs (Python API)" -ForegroundColor Gray
Write-Host "‚Ä¢ http://localhost:8001/health (Python Health)" -ForegroundColor Gray
Write-Host "‚Ä¢ http://localhost:8052/health (Julia Health)" -ForegroundColor Gray
Write-Host "‚Ä¢ http://localhost:8052/agents (Julia Agents)" -ForegroundColor Gray

Write-Host "`nüõ†Ô∏è  COMANDOS √öTEIS:" -ForegroundColor White
Write-Host "‚Ä¢ docker logs ghost-postgres (logs do banco)" -ForegroundColor Gray
Write-Host "‚Ä¢ Ctrl+C nas janelas para parar servi√ßos" -ForegroundColor Gray

Write-Host "`n‚ú® TODOS OS SERVI√áOS INICIADOS!" -ForegroundColor Green
Write-Host "üì± Acesse http://localhost:3000 para come√ßar" -ForegroundColor Cyan

# üîÑ AGUARDAR INTERA√á√ÉO DO USU√ÅRIO
Write-Host "`nPressione qualquer tecla para abrir o navegador..." -ForegroundColor Yellow
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")

# Abrir navegador
Start-Process "http://localhost:3000"

Write-Host "`nüéâ Desenvolvimento iniciado com sucesso!" -ForegroundColor Green
